{
  $schema: "https://docs.renovatebot.com/renovate-schema.json",
  extends: [
    "config:recommended",
    ":automergeDisabled",
    ":dependencyDashboard",
    ":docker",
    ":enablePreCommit",
    ":semanticCommits",
  ],
  schedule: ["every weekend"],
  platformAutomerge: false,
  prHourlyLimit: 6,
  prConcurrentLimit: 20,
  commitBodyTable: true,
  separateMajorMinor: false,
  prBodyNotes: [
    "{{#if isMajor}}:warning: THIS IS A MAJOR VERSION UPDATE :warning:{{/if}}",
    "Before merging, *always* check with the release notes if any other changes need to be done.",
  ],
  major: {
    enabled: true,
    addLabels: ["upgrade:major"],
  },
  minor: {
    enabled: true,
    addLabels: ["upgrade:minor"],
  },
  patch: {
    enabled: true,
    addLabels: ["upgrade:patch"],
  },
  vulnerabilityAlerts: {
    addLabels: ["security"],
    enabled: true
  },
  packageRules: [
    {
      matchPackageNames: ["camunda-platform"],
      addLabels: ["group:camunda-platform"],
      groupName: "Camunda Platform",
    },
    {
      matchDatasources: ["go"],
      addLabels: ["group:go"],
      groupName: "Go",
    },
    // limit the PR creation for the Renovate pre-commit hook (it's released very frequently)
    {
      matchPackageNames: ["renovatebot/pre-commit-hooks"],
      matchUpdateTypes: ["patch"],
      enabled: false,
    },
    {
      matchPackageNames: ["renovatebot/pre-commit-hooks"],
      schedule: ["on Saturday"],
    },
    // GitHub Actions
    {
      matchManagers: ["github-actions"],
      addLabels: ["group:github-actions", "component:ci"],
    },
    {
      matchUpdateTypes: ["minor", "patch"],
      matchManagers: ["github-actions"],
      addLabels: ["automerge"],
      automerge: true,
    },
    // Terraform AWS modules
    {
      matchDatasources: ["terraform-module"],
      matchPackagePatterns: ["terraform-aws-modules.*"],
      addLabels: ["group:terraform"],
      groupName: "Terraform AWS modules",
      schedule: [
        "every 2 weeks on Saturday and Sunday",
      ],
    },
    // Terraform major provider updates
    {
      matchDatasources: ["terraform-provider"],
      addLabels: ["group:terraform"],
      schedule: [
        "every 2 weeks on Saturday and Sunday",
      ]
    },
    // Terraform patch provider updates
    {
      matchUpdateTypes: ["patch"],
      matchDatasources: ["terraform-provider"],
      addLabels: ["group:terraform", "automerge"],
      groupName: "Terraform providers",
      automerge: true,
      schedule: [
        "every 2 weeks on Saturday and Sunday",
      ]
    },
    // Patches
    // Those are tested packages, and we know that they follow the semver convention,
    // but it's fine to have candidate packages to test before move them to minor section.
    {
      matchUpdateTypes: ["patch"],
      matchPackagePatterns: [
        "^terraform$",
        "aquasecurity/tfsec",
        "pre-commit",
        "terraform-aws-modules/.+",
        "terraform-docs",
        "terraform-linters/tflint",
      ],
      addLabels: ["automerge"],
      automerge: true,
    },
    // Minor versions
    // Those are tested packages, and we know that they follow the semver convention,
    // but it's fine to have candidate packages to test before move them to minor section.
    {
      matchUpdateTypes: ["minor"],
      matchPackagePatterns: [
        "pre-commit",
        "terraform-docs",
        "terraform-linters/tflint",
      ],
      addLabels: ["automerge"],
      automerge: true,
    },
    // Create PRs and automerge mentioned components afterward
    // Those are tested packages
    {
      matchUpdateTypes: ["major"],
      matchPackagePatterns: [
        "pre-commit/.+",
      ],
      addLabels: ["automerge"],
      automerge: true,
    },
    {
      matchUpdateTypes: ["major", "minor", "patch"],
      matchManagers: ["pre-commit"],
      groupName: "pre-commit hooks",
      addLabels: ["automerge"],
      automerge: true
    },
    // For known GitHub repositories that use GitHub tags/releases of format
    // "v1.2.3" and where the asdf plugin ignores the "v" prefix, we also tell
    // Renovate to ignore it via extractVersion when updating .tool-version file
    {
      matchFileNames: ["**/.tool-versions", "**/*.tf"],
      matchPackageNames: [
        "hashicorp/terraform",
        "helm/helm",
        "koalaman/shellcheck",
        "pre-commit/pre-commit",
        "rhysd/actionlint",
      ],
      extractVersion: "^v(?<version>.*)$",
    },
    // KeyCloak
    {
      matchManagers: ["dockerfile"],
      groupName: "new major keycloak available",
      groupSlug: "new-major-keycloak",
      matchDatasources: ["docker"],
      matchFileNames: [".watch-latest/Dockerfile"],
      matchUpdateTypes: ["major"],
      enabled: true,
      addLabels: ["dependencies", "docker", "hold"],
    },
    {
      matchManagers: ["dockerfile"],
      groupName: "all non-major keycloak",
      groupSlug: "all-non-major-keycloak",
      matchDatasources: ["docker"],
      matchFileNames: ["keycloak-*/Dockerfile"],
      versioning: "regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)(:?-(?<compatibility>.+)(?<build>\\d+)-r(?<revision>\\d+))?$",
      enabled: true,
      addLabels: ["dependencies", "docker"],
    },
    {
      matchManagers: ["dockerfile"],
      matchDatasources: ["docker"],
      matchFileNames: ["keycloak-*/Dockerfile"],
      matchUpdateTypes: ["major"],
      enabled: false,
    },
  ],
  customManagers: [
   {
      customType: "regex",
      fileMatch: [
        "\.yml",
        "\.sh",
        ],
      matchStrings: [
        "datasource=(?<datasource>.*?) depName=(?<depName>.*?)( registryUrl=(?<registryUrl>.*?))?( versioning=(?<versioning>.*?))?\\s.*?(- |=|: )(?<currentValue>.*)",
      ],
      versioningTemplate: "{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}"
    },
    // Separating Go due to capturing different value with the above statement
    {
      customType: "regex",
      fileMatch: ["\.go"],
      matchStrings: [
        "datasource=(?<datasource>.*?) depName=(?<depName>.*?) registryUrl=(?<registryUrl>.*?)( versioning=(?<versioning>.*?))?\\s.*? \"(?<currentValue>.*)\"",
      ],
      versioningTemplate: "{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}"
    },
    {
      customType: "regex",
      fileMatch: ["\.tool-versions$"],
      matchStrings: [
        "datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?( extractVersion=(?<extractVersion>.*?))?\\s.*? (?<currentValue>.*)\\s"
      ],
      versioningTemplate: "{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}",
    },
    {
      customType: "regex",
      fileMatch: ["^justfile$"],
      matchStrings: [
        "datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?( extractVersion=(?<extractVersion>.*?))?\\s(?<originalPackageName>.*) := \"(?<currentValue>.*?)\"\\s"
      ],
      versioningTemplate: "{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}",
    },
  ]
}
